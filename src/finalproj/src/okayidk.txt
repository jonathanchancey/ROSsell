#include "ros/ros.h"
#include "tf/transform_listener.h"
#include "sensor_msgs/PointCloud.h"
#include "tf/message_filter.h"
#include "message_filters/subscriber.h"
#include "laser_geometry/laser_geometry.h"
#include "geometry_msgs/Point32.h"
#include "nav_msgs/GetMap.h"
#include "nav_msgs/OccupancyGrid.h"
#include "laser_assembler/AssembleScans.h"

using namespace ros;
using namespace laser_assembler;


sensor_msgs::PointCloud ptCloud;



class LaserScanToPointCloud{

public:

  ros::NodeHandle n_;
  laser_geometry::LaserProjection projector_;
  tf::TransformListener listener_;
  message_filters::Subscriber<sensor_msgs::LaserScan> laser_sub_;
  tf::MessageFilter<sensor_msgs::LaserScan> laser_notifier_;
  ros::Publisher scan_pub_;
  //ros::Publisher scan_pub_guff_ = n_.advertise<sensor_msgs::PointCloud>("/assemble_scans",1000);


  LaserScanToPointCloud(ros::NodeHandle n) : 
    n_(n),
    laser_sub_(n_, "/scan", 10),
    laser_notifier_(laser_sub_,listener_, "base_link", 10)
  {
    laser_notifier_.registerCallback(
      boost::bind(&LaserScanToPointCloud::scanCallback, this, _1));
    laser_notifier_.setTolerance(ros::Duration(0.01));
    scan_pub_ = n_.advertise<sensor_msgs::PointCloud>("/my_cloud",1);
  }

  void scanCallback (const sensor_msgs::LaserScan::ConstPtr& scan_in)
  {
    sensor_msgs::PointCloud cloud;
    try
    {
        projector_.transformLaserScanToPointCloud(
          "base_link",*scan_in, cloud,listener_);
    }
    catch (tf::TransformException& e)
    {
        std::cout << e.what();
        return;
    }
    
    // Do something with cloud.

    int seqNum = cloud.header.seq;
    int c =0;

//     for(int c = 0; c < cloud.points.size();c++){
//       //if()
//       ROS_INFO_STREAM("x " << cloud.points[c].x);
//       ROS_INFO_STREAM("y " << cloud.points[c].y);
// }
    //end
    //laser_assembler::AssembleScans aScan;

    scan_pub_.publish(cloud);
    ptCloud = cloud;
    //scan_pub_guff_.publish(cloud);

  }
};

// void mapReceived(const nav_msgs::OccupancyGrid::ConstPtr&msg){
//   for(int c = 0; c < msg->data.size(); c++){
//     ROS_INFO_STREAM(msg->data[c]);

//   }
// }

int main(int argc, char** argv)
{
  
  ros::init(argc, argv, "obRec");
  ros::NodeHandle n;
  LaserScanToPointCloud lstopc(n);
  ros::Publisher pubScan = n.advertise<sensor_msgs::PointCloud>("cloudio",1000);


  // laser_assembler::AssembleScans aScan;
  // aScan.request.begin = Time(0,0);
  // aScan.request.end = Time::now();
  // aScan.response.cloud.points.size();

 // Subscriber mapSub = n.subscribe <nav_msgs::OccupancyGrid>("/map", 1000, &mapReceived);
        service::waitForService("assemble_scans");
 ServiceClient client = n.serviceClient<AssembleScans>("assemble_scans");
 AssembleScans srv;

  while(ok()){

  srv.request.begin = Time(0,0);
  srv.request.end = Time::now();
  if(client.call(srv)){
    ROS_INFO_STREAM("got cloud w/ points " << srv.response.cloud.points.size());

  }
  else{
    ROS_INFO_STREAM("epic fail");
  }

    pubScan.publish(ptCloud);



  spinOnce();

  

  }
  
  return 0;

}
